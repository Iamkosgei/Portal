// Mocks generated by Mockito 5.4.4 from annotations
// in portal/test/features/questions/data/repositories/question_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:portal/core/database/database.dart' as _i7;
import 'package:portal/features/questions/data/daos/option_dao.dart' as _i3;
import 'package:portal/features/questions/data/daos/question_dao.dart' as _i2;
import 'package:portal/features/questions/data/models/option_entity.dart'
    as _i9;
import 'package:portal/features/questions/data/models/question_entity.dart'
    as _i8;
import 'package:portal/features/submissions/data/daos/submission_dao.dart'
    as _i4;
import 'package:sqflite/sqflite.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQuestionDao_0 extends _i1.SmartFake implements _i2.QuestionDao {
  _FakeQuestionDao_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOptionDao_1 extends _i1.SmartFake implements _i3.OptionDao {
  _FakeOptionDao_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSubmissionDao_2 extends _i1.SmartFake implements _i4.SubmissionDao {
  _FakeSubmissionDao_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_3<T> extends _i1.SmartFake
    implements _i5.StreamController<T> {
  _FakeStreamController_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseExecutor_4 extends _i1.SmartFake
    implements _i6.DatabaseExecutor {
  _FakeDatabaseExecutor_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i7.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.QuestionDao get questionDao => (super.noSuchMethod(
        Invocation.getter(#questionDao),
        returnValue: _FakeQuestionDao_0(
          this,
          Invocation.getter(#questionDao),
        ),
      ) as _i2.QuestionDao);

  @override
  _i3.OptionDao get optionDao => (super.noSuchMethod(
        Invocation.getter(#optionDao),
        returnValue: _FakeOptionDao_1(
          this,
          Invocation.getter(#optionDao),
        ),
      ) as _i3.OptionDao);

  @override
  _i4.SubmissionDao get submissionDao => (super.noSuchMethod(
        Invocation.getter(#submissionDao),
        returnValue: _FakeSubmissionDao_2(
          this,
          Invocation.getter(#submissionDao),
        ),
      ) as _i4.SubmissionDao);

  @override
  _i5.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_3<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i5.StreamController<String>);

  @override
  set changeListener(_i5.StreamController<String>? _changeListener) =>
      super.noSuchMethod(
        Invocation.setter(
          #changeListener,
          _changeListener,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_4(
          this,
          Invocation.getter(#database),
        ),
      ) as _i6.DatabaseExecutor);

  @override
  set database(_i6.DatabaseExecutor? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [QuestionDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionDao extends _i1.Mock implements _i2.QuestionDao {
  MockQuestionDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.QuestionEntity>> getAllQuestions() => (super.noSuchMethod(
        Invocation.method(
          #getAllQuestions,
          [],
        ),
        returnValue:
            _i5.Future<List<_i8.QuestionEntity>>.value(<_i8.QuestionEntity>[]),
      ) as _i5.Future<List<_i8.QuestionEntity>>);

  @override
  _i5.Future<_i8.QuestionEntity?> getQuestionById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuestionById,
          [id],
        ),
        returnValue: _i5.Future<_i8.QuestionEntity?>.value(),
      ) as _i5.Future<_i8.QuestionEntity?>);

  @override
  _i5.Future<void> insertQuestion(_i8.QuestionEntity? question) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertQuestion,
          [question],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateQuestion(_i8.QuestionEntity? question) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateQuestion,
          [question],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteQuestion(_i8.QuestionEntity? question) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteQuestion,
          [question],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [OptionDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockOptionDao extends _i1.Mock implements _i3.OptionDao {
  MockOptionDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i9.OptionEntity>> getOptionsForQuestion(
          String? questionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOptionsForQuestion,
          [questionId],
        ),
        returnValue:
            _i5.Future<List<_i9.OptionEntity>>.value(<_i9.OptionEntity>[]),
      ) as _i5.Future<List<_i9.OptionEntity>>);

  @override
  _i5.Future<void> insertOption(_i9.OptionEntity? option) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOption,
          [option],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateOption(_i9.OptionEntity? option) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOption,
          [option],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteOption(_i9.OptionEntity? option) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOption,
          [option],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
